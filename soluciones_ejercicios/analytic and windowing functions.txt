
select products.*, medias.media
from products, (select brand, avg(price) media
                from products
                group by brand) medias
where products.brand = medias.brand
order by products.brand;

------------------------------------------------------------

SELECT products.*,
       count(*) OVER (PARTITION BY brand) AS avg 
FROM products;










---------------------------------------------------------------------------------------
-- 1. What is the price of the least expensive product?
---------------------------------------------------------------------------------------

-- group function

SELECT MIN(price)
FROM products;

---------------------------------------------------------------------------------------
-- 2. Which product is least expensive?
---------------------------------------------------------------------------------------

-- subquery

SELECT prod_id, name, price
FROM products
WHERE price = (SELECT MIN(price) FROM products);

-- limit 1

SELECT * 
FROM products
ORDER BY price ASC
LIMIT 1;

---------------------------------------------------------------------------------------
-- 3. What is the price of the least expensive product in each brand?
---------------------------------------------------------------------------------------

-- group by and min

SELECT brand, MIN(price) AS least_expensive_price
FROM products
GROUP BY brand;

-- windowing function based on row_number()
-- this code allows us to retrieve additional fields for the min product

SELECT brand, prod_id, name, price
FROM (
    SELECT brand, prod_id, name, price,
           ROW_NUMBER() OVER (PARTITION BY brand ORDER BY price ASC) AS rank
    FROM products
) ranked_products
WHERE rank = 1;

-- better with RANK()

SELECT brand, prod_id, name, price
FROM (
    SELECT brand, prod_id, name, price,
           RANK() OVER (PARTITION BY brand ORDER BY price ASC) AS rank
    FROM products
) ranked_products
WHERE rank = 1;

-- RANK() AND DENSE_RANK()

SELECT brand, prod_id, name, price,
       ROW_NUMBER() OVER (PARTITION BY brand ORDER BY price ASC) AS row_number,
       RANK() OVER (PARTITION BY brand ORDER BY price ASC) AS rank,
       DENSE_RANK() OVER (PARTITION BY brand ORDER BY price ASC) AS dense_rank
FROM products;

-----------------------------------------------------------------------------------------
-- 4. What is difference between a product’s price and the minimum price for that brand?
-----------------------------------------------------------------------------------------

-- group by

SELECT p.prod_id, p.name, p.brand, p.price,
       p.price - min_prices.min_price AS price_difference
FROM products p
JOIN (
    SELECT brand, MIN(price) AS min_price
    FROM products
    GROUP BY brand
) min_prices
ON p.brand = min_prices.brand
ORDER BY p.brand, p.name;

--windowing function

SELECT prod_id, name, brand, price,
       price - MIN(price) OVER (PARTITION BY brand) AS price_difference
FROM products
ORDER BY brand, name;

---------------------------------------------------------------------------------------
-- 5. Which product is the least expensive for each brand?
---------------------------------------------------------------------------------------

-- group by

SELECT p.prod_id, p.name, p.brand, p.price
FROM products p
JOIN (
    SELECT brand, MIN(price) AS min_price
    FROM products
    GROUP BY brand
) min_prices
ON p.brand = min_prices.brand AND p.price = min_prices.min_price
ORDER BY p.brand, p.name;

-- windowing function

SELECT prod_id, name, brand, price
FROM (
    SELECT prod_id, name, brand, price,
           ROW_NUMBER() OVER (PARTITION BY brand ORDER BY price ASC) AS rank
    FROM products
) ranked_products
WHERE rank = 1
ORDER BY brand, name;

---------------------------------------------------------------------------------------
-- 6. What’s the second lowest price? What’s the fifth lowest?
---------------------------------------------------------------------------------------

-- subquery

SELECT price AS second_lowest_price
FROM products
WHERE price > (SELECT MIN(price) FROM products)
ORDER BY price
LIMIT 1;

-- subquery 

SELECT MIN(price) AS second_lowest_price
FROM products
WHERE price > (SELECT MIN(price) FROM products);

-- windowing function

SELECT price
FROM (
    SELECT price,
           ROW_NUMBER() OVER (ORDER BY price ASC) AS price_rank
    FROM products
) ranked_prices
WHERE price_rank = 2;

select price from products order by price;

---------------------------------------------------------------------------------------
-- RANK and ROW_NUMBER()
---------------------------------------------------------------------------------------

-- ROW_NUMBER arbitrarily identifies one as first and one as second,
-- whereas RANK returns the same rank for rows with the same value, no matter how many there are
-- Note that RANK isn’t always consecutive
-- The PARTITION clause of a window specification is optional. If you specify ORDER BY but not
-- PARTITION BY, the window is the entire dataset

SELECT prod_id, brand, price,
RANK() OVER (PARTITION BY brand ORDER BY price) AS rank,
ROW_NUMBER() OVER (PARTITION BY brand ORDER BY price) AS row_number
FROM products
WHERE brand = 'Gigabux';

---------------------------------------------------------------------------------------
-- RANK and DENSE_RANK
---------------------------------------------------------------------------------------

SELECT prod_id, brand, price,
RANK() OVER (PARTITION BY brand ORDER BY price) AS rank,
DENSE_RANK() OVER (PARTITION BY brand ORDER BY price) AS d_rank
FROM products
WHERE brand = 'Gigabux';

---------------------------------------------------------------------------------------
-- NTILE(N)
---------------------------------------------------------------------------------------

-- Question: In what quartile (n=4) and 2-tile for a brand is each product’s price?

-- NTILE(n) attempts to distribute evenly the values into n divisions. For example, a 2-tile splits the
-- values into two categories, below the median (tile2 = 1) and above the median (tile2 = 2).
-- Ties that lie on the cusp will be arbitrarily placed in one division or the other

SELECT prod_id, brand, price,
    NTILE(4) OVER (PARTITION BY brand ORDER BY price) AS tile4, 
    NTILE(2) OVER (PARTITION BY brand ORDER BY price) AS tile2
FROM products
WHERE brand = 'Gigabux'
ORDER BY price;

---------------------------------------------------------------------------------------
-- PERCENT_RANK and CUME_DIST
---------------------------------------------------------------------------------------

-- PERCENT_RANK = (RANK – 1) / (number of rows - 1)
-- To make it a true percentage, multiply by 100
-- (calculates the percentage of rows that are strictly less than the current row.)

-- CUME_DIST is also a decimal
-- For ascending order: proportion of rows with values ≤ current value
-- (indicates the proportion of rows that have a lesser or equal value than the current row.)

SELECT prod_id, brand, price,
    RANK() OVER (PARTITION BY brand ORDER BY price) AS rank,
    PERCENT_RANK() OVER (PARTITION BY brand ORDER BY price ASC) AS percent_rank,
    CUME_DIST() OVER (PARTITION BY brand ORDER BY price ASC) AS cume_dist
FROM products
WHERE brand = 'Gigabux';

-- real percentage and rounded to 2 decimals

SELECT prod_id, brand, price,
    RANK() OVER (PARTITION BY brand ORDER BY price) AS rank,
    ROUND(PERCENT_RANK() OVER (PARTITION BY brand ORDER BY price ASC) * 100, 2) AS "percent rank formatted",
    CUME_DIST() OVER (PARTITION BY brand ORDER BY price ASC) AS "cummulative distribution"
FROM products
WHERE brand = 'Gigabux';

---------------------------------------------------------------------------------------
-- LEAD and LAG
---------------------------------------------------------------------------------------

-- Question: What is the difference in price between consecutively ranked products, for Gigabux products?

SELECT prod_id, brand, price,
        price - LAG(price)  OVER (PARTITION BY brand ORDER BY price) AS "difference with previous product" ,
        price - LEAD(price) OVER (PARTITION BY brand ORDER BY price) AS "difference with next product"
FROM products
WHERE brand = 'Gigabux';

---------------------------------------------------------------------------------------
-- Sliding windows
---------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------
-- ROWS BETWEEN
---------------------------------------------------------------------------------------

-- The ROWS clause limits the rows within a partition by specifying a fixed number
-- of rows preceding or following the current row. 

---------------------------------------------------------------------------------------
-- RANGE BETWEEN
---------------------------------------------------------------------------------------

-- Alternatively, the RANGE clause logically limits the rows within a partition 
-- by specifying a range of values with respect to the value in the current row.

-- Upper and lower bounds have three options
-- CURRENT ROW
-- A number
-- UNBOUNDED

-- Preceding and following rows are defined based on the ordering specified by the ORDER BY clause.
-- The window frame ‘RANGE ... CURRENT ROW ...’ includes all rows that have the same values in the
-- ORDER BY expression as the current row

-- Question: What are the daily and three-day total number of ratings for product 1274348 
-- in the ratings table, for ratings after April 2019?

---------------------------------------------------------------------------------------
-- ROWS BETWEEN EXAMPLE
---------------------------------------------------------------------------------------

SELECT this_date, daily,
    SUM(daily) OVER (ORDER BY this_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS three_day
FROM
  (SELECT to_date(posted) AS this_date, COUNT(rating) AS daily 
  FROM ratings 
  WHERE prod_id = 1274348
  GROUP BY this_date 
  HAVING to_date(posted) > '2013-01-10') s;

---------------------------------------------------------------------------------------  
-- RANGE BETWEEN EXAMPLE
  ---------------------------------------------------------------------------------------

-- Bounds must be between CURRENT ROW and UNBOUNDED (either end)
-- Includes all rows with values in the range of the sort values at the boundaries
-- Combines rows that match the current row’s ORDER BY value

-- row_sum adds the amounts between the first row and the current row
-- range_sum adds the amounts between the first row and the last row with the same value for
-- month as the current row.

-- In this example, range_sum is the sum of the deposits by the end of
-- the specified month.

SELECT id, month, amount,
    SUM(amount) OVER (ORDER BY month ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS row_sum,
    SUM(amount) OVER (ORDER BY month RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS range_sum
FROM deposits;




-----------------------------------------------------------
-- SOLUCIONES EJERCICIOS
-----------------------------------------------------------

-- 1.
-- How many ads were displayed per site per day?
-- Hint: You don't need to use analytic functions or windowing for this one.

SELECT display_site, 
       display_date, 
       COUNT(display_date) AS num_visits
FROM analyst.ads 
GROUP BY display_site, display_date
ORDER BY display_site, display_date;

-- 2.
-- For each day, how did each site rank in number of displays?
-- Hint: Use your previous query as a subquery.
-- Hint: To make it easy to see if you have done this correctly, first sort by day, and then by rank within each day.

SELECT display_site, 
       display_date, 
       num_visits,
       RANK() OVER (PARTITION BY display_date 
                    ORDER BY num_visits DESC) AS dayrank
FROM (
      SELECT display_site, 
             display_date, 
             COUNT(display_date) AS num_visits
      FROM analyst.ads 
      GROUP BY display_site, display_date) ads_count
ORDER BY display_date, dayrank;

-- 3. For each day, how did each site's daily count compare to the previous day?
-- The results should display the site's daily count and the previous day's count in the same row.
-- Put the sites together in alphanumerical order, and then within each site, put the daily counts in order.

SELECT  display_site, 
        display_date, 
        num_visits,
        LAG(num_visits) OVER (PARTITION BY display_site 
                              ORDER BY display_date) AS num_visits_prev,
                        
        num_visits - LAG(num_visits) OVER (PARTITION BY display_site 
                                           ORDER BY display_date) AS difference
FROM (
        SELECT  display_site, 
                display_date, 
                COUNT(display_date) AS num_visits
        FROM analyst.ads 
        GROUP BY display_site, display_date) ads_count
        
ORDER BY display_site, display_date;

-- 4. What is the per-site average count for a seven-day period?
-- Hint: Use a sliding window (with ROWS BETWEEN ... )

SELECT display_site, 
       display_date, 
       num_visits,
       AVG(num_visits) OVER (PARTITION BY display_site 
                             ORDER BY display_date
                             ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS window_7_days_average
  FROM (
    SELECT display_site, display_date, COUNT(display_date) AS num_visits
      FROM analyst.ads GROUP BY display_site, display_date) ads_count
  ORDER BY display_site, display_date;
  
-------------------------------------------------
-- BONUS
-------------------------------------------------
-- MEDIAN 
SELECT brand, name, price
    FROM
      (SELECT brand, name, price,
        cume_dist() OVER (ORDER BY price) AS cd
        FROM analyst.products) x
WHERE cd >= 0.5
ORDER BY price;

-- MEDIAN BY BRAND

SELECT DISTINCT brand, med
FROM
    (SELECT brand,
            FIRST_VALUE(price) OVER (PARTITION BY brand ORDER BY cd) AS med
     FROM
        (SELECT brand, 
                price,
                CUME_DIST() OVER (PARTITION BY brand ORDER BY price) AS cd
         FROM analyst.products) x
      WHERE cd >=0.5
    ) y;

